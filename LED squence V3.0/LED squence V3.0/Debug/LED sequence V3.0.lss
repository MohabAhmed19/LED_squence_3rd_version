
LED sequence V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000127c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000127c  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00001312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e40  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ab  00000000  00000000  00004320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000158d  00000000  00000000  00004bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00006158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096b  00000000  00000000  0000688d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_1>
       8:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 28 07 	call	0xe50	; 0xe50 <main>
      8a:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
static uint8_t Blink_state=1;
static uint8_t PB0_state=0;

int app_init(void)
{
	LED_init(Port_A, PIN_0);
      92:	60 e0       	ldi	r22, 0x00	; 0
      94:	81 e4       	ldi	r24, 0x41	; 65
      96:	0e 94 16 07 	call	0xe2c	; 0xe2c <LED_init>
	LED_init(Port_A, PIN_1);
      9a:	61 e0       	ldi	r22, 0x01	; 1
      9c:	81 e4       	ldi	r24, 0x41	; 65
      9e:	0e 94 16 07 	call	0xe2c	; 0xe2c <LED_init>
	LED_init(Port_A, PIN_2);	
      a2:	62 e0       	ldi	r22, 0x02	; 2
      a4:	81 e4       	ldi	r24, 0x41	; 65
      a6:	0e 94 16 07 	call	0xe2c	; 0xe2c <LED_init>
	LED_init(Port_A, PIN_3);
      aa:	63 e0       	ldi	r22, 0x03	; 3
      ac:	81 e4       	ldi	r24, 0x41	; 65
      ae:	0e 94 16 07 	call	0xe2c	; 0xe2c <LED_init>
	ex_int_init(Interrupt_0,rising_edge);
      b2:	66 e0       	ldi	r22, 0x06	; 6
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	0e 94 3d 08 	call	0x107a	; 0x107a <ex_int_init>
	ex_int_init(Interrupt_1,rising_edge);
      ba:	66 e0       	ldi	r22, 0x06	; 6
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	0e 94 3d 08 	call	0x107a	; 0x107a <ex_int_init>
	return 0;
}
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	08 95       	ret

000000c8 <app>:

int app(void)
{
	switch(Blink_state)
      c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      cc:	83 30       	cpi	r24, 0x03	; 3
      ce:	09 f4       	brne	.+2      	; 0xd2 <app+0xa>
      d0:	5c c2       	rjmp	.+1208   	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
      d2:	30 f4       	brcc	.+12     	; 0xe0 <app+0x18>
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	59 f0       	breq	.+22     	; 0xee <app+0x26>
      d8:	82 30       	cpi	r24, 0x02	; 2
      da:	09 f4       	brne	.+2      	; 0xde <app+0x16>
      dc:	2f c1       	rjmp	.+606    	; 0x33c <app+0x274>
      de:	c8 c5       	rjmp	.+2960   	; 0xc70 <__stack+0x411>
      e0:	84 30       	cpi	r24, 0x04	; 4
      e2:	09 f4       	brne	.+2      	; 0xe6 <app+0x1e>
      e4:	79 c3       	rjmp	.+1778   	; 0x7d8 <__EEPROM_REGION_LENGTH__+0x3d8>
      e6:	85 30       	cpi	r24, 0x05	; 5
      e8:	09 f4       	brne	.+2      	; 0xec <app+0x24>
      ea:	9d c4       	rjmp	.+2362   	; 0xa26 <__stack+0x1c7>
      ec:	c1 c5       	rjmp	.+2946   	; 0xc70 <__stack+0x411>
	{
		case 1:
		if(PB0_state==0)
      ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
      f2:	81 11       	cpse	r24, r1
      f4:	11 c0       	rjmp	.+34     	; 0x118 <app+0x50>
		{
			LED_OFF(Port_A, PIN_0);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	81 e4       	ldi	r24, 0x41	; 65
      fa:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	81 e4       	ldi	r24, 0x41	; 65
     102:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     106:	62 e0       	ldi	r22, 0x02	; 2
     108:	81 e4       	ldi	r24, 0x41	; 65
     10a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     10e:	63 e0       	ldi	r22, 0x03	; 3
     110:	81 e4       	ldi	r24, 0x41	; 65
     112:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
     116:	ac c5       	rjmp	.+2904   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==1)
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	29 f5       	brne	.+74     	; 0x166 <app+0x9e>
		{
			LED_ON(Port_A, PIN_0);
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	81 e4       	ldi	r24, 0x41	; 65
     120:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_1);
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	81 e4       	ldi	r24, 0x41	; 65
     128:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     12c:	62 e0       	ldi	r22, 0x02	; 2
     12e:	81 e4       	ldi	r24, 0x41	; 65
     130:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     134:	63 e0       	ldi	r22, 0x03	; 3
     136:	81 e4       	ldi	r24, 0x41	; 65
     138:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_100ms();
     13c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay_100ms>
			LED_OFF(Port_A, PIN_0);
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	81 e4       	ldi	r24, 0x41	; 65
     144:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	81 e4       	ldi	r24, 0x41	; 65
     14c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     150:	62 e0       	ldi	r22, 0x02	; 2
     152:	81 e4       	ldi	r24, 0x41	; 65
     154:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	81 e4       	ldi	r24, 0x41	; 65
     15c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_900ms();
     160:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_900ms>
     164:	85 c5       	rjmp	.+2826   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==2)
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	29 f5       	brne	.+74     	; 0x1b4 <app+0xec>
		{
			LED_ON(Port_A, PIN_0);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	81 e4       	ldi	r24, 0x41	; 65
     16e:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	81 e4       	ldi	r24, 0x41	; 65
     176:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_2);
     17a:	62 e0       	ldi	r22, 0x02	; 2
     17c:	81 e4       	ldi	r24, 0x41	; 65
     17e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     182:	63 e0       	ldi	r22, 0x03	; 3
     184:	81 e4       	ldi	r24, 0x41	; 65
     186:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_100ms();
     18a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay_100ms>
			LED_OFF(Port_A, PIN_0);
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	81 e4       	ldi	r24, 0x41	; 65
     192:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	81 e4       	ldi	r24, 0x41	; 65
     19a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     19e:	62 e0       	ldi	r22, 0x02	; 2
     1a0:	81 e4       	ldi	r24, 0x41	; 65
     1a2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     1a6:	63 e0       	ldi	r22, 0x03	; 3
     1a8:	81 e4       	ldi	r24, 0x41	; 65
     1aa:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_900ms();
     1ae:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_900ms>
     1b2:	5e c5       	rjmp	.+2748   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==3)
     1b4:	83 30       	cpi	r24, 0x03	; 3
     1b6:	29 f5       	brne	.+74     	; 0x202 <app+0x13a>
		{
			LED_ON(Port_A, PIN_0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e4       	ldi	r24, 0x41	; 65
     1bc:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	81 e4       	ldi	r24, 0x41	; 65
     1c4:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     1c8:	62 e0       	ldi	r22, 0x02	; 2
     1ca:	81 e4       	ldi	r24, 0x41	; 65
     1cc:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_3);
     1d0:	63 e0       	ldi	r22, 0x03	; 3
     1d2:	81 e4       	ldi	r24, 0x41	; 65
     1d4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_100ms();
     1d8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay_100ms>
			LED_OFF(Port_A, PIN_0);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	81 e4       	ldi	r24, 0x41	; 65
     1e0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	81 e4       	ldi	r24, 0x41	; 65
     1e8:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     1ec:	62 e0       	ldi	r22, 0x02	; 2
     1ee:	81 e4       	ldi	r24, 0x41	; 65
     1f0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     1f4:	63 e0       	ldi	r22, 0x03	; 3
     1f6:	81 e4       	ldi	r24, 0x41	; 65
     1f8:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_900ms();
     1fc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_900ms>
     200:	37 c5       	rjmp	.+2670   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==4)
     202:	84 30       	cpi	r24, 0x04	; 4
     204:	29 f5       	brne	.+74     	; 0x250 <app+0x188>
		{
			LED_ON(Port_A, PIN_0);
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	81 e4       	ldi	r24, 0x41	; 65
     20a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	81 e4       	ldi	r24, 0x41	; 65
     212:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     216:	62 e0       	ldi	r22, 0x02	; 2
     218:	81 e4       	ldi	r24, 0x41	; 65
     21a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     21e:	63 e0       	ldi	r22, 0x03	; 3
     220:	81 e4       	ldi	r24, 0x41	; 65
     222:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_100ms();
     226:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay_100ms>
			LED_OFF(Port_A, PIN_0);
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	81 e4       	ldi	r24, 0x41	; 65
     22e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	81 e4       	ldi	r24, 0x41	; 65
     236:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     23a:	62 e0       	ldi	r22, 0x02	; 2
     23c:	81 e4       	ldi	r24, 0x41	; 65
     23e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	81 e4       	ldi	r24, 0x41	; 65
     246:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_900ms();
     24a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_900ms>
     24e:	10 c5       	rjmp	.+2592   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==5)
     250:	85 30       	cpi	r24, 0x05	; 5
     252:	29 f5       	brne	.+74     	; 0x29e <app+0x1d6>
		{
			LED_OFF(Port_A, PIN_0);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	81 e4       	ldi	r24, 0x41	; 65
     258:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_1);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	81 e4       	ldi	r24, 0x41	; 65
     260:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     264:	62 e0       	ldi	r22, 0x02	; 2
     266:	81 e4       	ldi	r24, 0x41	; 65
     268:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     26c:	63 e0       	ldi	r22, 0x03	; 3
     26e:	81 e4       	ldi	r24, 0x41	; 65
     270:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_100ms();
     274:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay_100ms>
			LED_OFF(Port_A, PIN_0);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	81 e4       	ldi	r24, 0x41	; 65
     27c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	81 e4       	ldi	r24, 0x41	; 65
     284:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     288:	62 e0       	ldi	r22, 0x02	; 2
     28a:	81 e4       	ldi	r24, 0x41	; 65
     28c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     290:	63 e0       	ldi	r22, 0x03	; 3
     292:	81 e4       	ldi	r24, 0x41	; 65
     294:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_900ms();
     298:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_900ms>
     29c:	e9 c4       	rjmp	.+2514   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==6)
     29e:	86 30       	cpi	r24, 0x06	; 6
     2a0:	29 f5       	brne	.+74     	; 0x2ec <app+0x224>
		{
			LED_OFF(Port_A, PIN_0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	81 e4       	ldi	r24, 0x41	; 65
     2a6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     2aa:	61 e0       	ldi	r22, 0x01	; 1
     2ac:	81 e4       	ldi	r24, 0x41	; 65
     2ae:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_2);
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	81 e4       	ldi	r24, 0x41	; 65
     2b6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     2ba:	63 e0       	ldi	r22, 0x03	; 3
     2bc:	81 e4       	ldi	r24, 0x41	; 65
     2be:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_100ms();
     2c2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay_100ms>
			LED_OFF(Port_A, PIN_0);
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	81 e4       	ldi	r24, 0x41	; 65
     2ca:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	81 e4       	ldi	r24, 0x41	; 65
     2d2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	81 e4       	ldi	r24, 0x41	; 65
     2da:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     2de:	63 e0       	ldi	r22, 0x03	; 3
     2e0:	81 e4       	ldi	r24, 0x41	; 65
     2e2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_900ms();
     2e6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_900ms>
     2ea:	c2 c4       	rjmp	.+2436   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==7)
     2ec:	87 30       	cpi	r24, 0x07	; 7
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <app+0x22a>
     2f0:	bf c4       	rjmp	.+2430   	; 0xc70 <__stack+0x411>
		{
			LED_OFF(Port_A, PIN_0);
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	81 e4       	ldi	r24, 0x41	; 65
     2f6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	81 e4       	ldi	r24, 0x41	; 65
     2fe:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     302:	62 e0       	ldi	r22, 0x02	; 2
     304:	81 e4       	ldi	r24, 0x41	; 65
     306:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_3);
     30a:	63 e0       	ldi	r22, 0x03	; 3
     30c:	81 e4       	ldi	r24, 0x41	; 65
     30e:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_100ms();
     312:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay_100ms>
			LED_OFF(Port_A, PIN_0);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	81 e4       	ldi	r24, 0x41	; 65
     31a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	81 e4       	ldi	r24, 0x41	; 65
     322:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     326:	62 e0       	ldi	r22, 0x02	; 2
     328:	81 e4       	ldi	r24, 0x41	; 65
     32a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     32e:	63 e0       	ldi	r22, 0x03	; 3
     330:	81 e4       	ldi	r24, 0x41	; 65
     332:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_900ms();
     336:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_900ms>
     33a:	9a c4       	rjmp	.+2356   	; 0xc70 <__stack+0x411>
		}
		break;
		case 2:
		if(PB0_state==0)
     33c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     340:	81 11       	cpse	r24, r1
     342:	11 c0       	rjmp	.+34     	; 0x366 <app+0x29e>
		{
			LED_OFF(Port_A, PIN_0);
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	81 e4       	ldi	r24, 0x41	; 65
     348:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	81 e4       	ldi	r24, 0x41	; 65
     350:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     354:	62 e0       	ldi	r22, 0x02	; 2
     356:	81 e4       	ldi	r24, 0x41	; 65
     358:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     35c:	63 e0       	ldi	r22, 0x03	; 3
     35e:	81 e4       	ldi	r24, 0x41	; 65
     360:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
     364:	85 c4       	rjmp	.+2314   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==1)
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	29 f5       	brne	.+74     	; 0x3b4 <app+0x2ec>
		{
			LED_ON(Port_A, PIN_0);
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	81 e4       	ldi	r24, 0x41	; 65
     36e:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_1);
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	81 e4       	ldi	r24, 0x41	; 65
     376:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	81 e4       	ldi	r24, 0x41	; 65
     37e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     382:	63 e0       	ldi	r22, 0x03	; 3
     384:	81 e4       	ldi	r24, 0x41	; 65
     386:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     38a:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
			LED_OFF(Port_A, PIN_0);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	81 e4       	ldi	r24, 0x41	; 65
     392:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	81 e4       	ldi	r24, 0x41	; 65
     39a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	81 e4       	ldi	r24, 0x41	; 65
     3a2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     3a6:	63 e0       	ldi	r22, 0x03	; 3
     3a8:	81 e4       	ldi	r24, 0x41	; 65
     3aa:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     3ae:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
     3b2:	5e c4       	rjmp	.+2236   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==2)
     3b4:	82 30       	cpi	r24, 0x02	; 2
     3b6:	29 f5       	brne	.+74     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{
			LED_ON(Port_A, PIN_0);
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	81 e4       	ldi	r24, 0x41	; 65
     3bc:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	81 e4       	ldi	r24, 0x41	; 65
     3c4:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_2);
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	81 e4       	ldi	r24, 0x41	; 65
     3cc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     3d0:	63 e0       	ldi	r22, 0x03	; 3
     3d2:	81 e4       	ldi	r24, 0x41	; 65
     3d4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     3d8:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
			LED_OFF(Port_A, PIN_0);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	81 e4       	ldi	r24, 0x41	; 65
     3e0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	81 e4       	ldi	r24, 0x41	; 65
     3e8:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	81 e4       	ldi	r24, 0x41	; 65
     3f0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     3f4:	63 e0       	ldi	r22, 0x03	; 3
     3f6:	81 e4       	ldi	r24, 0x41	; 65
     3f8:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     3fc:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
     400:	37 c4       	rjmp	.+2158   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==3)
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	29 f5       	brne	.+74     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			LED_ON(Port_A, PIN_0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	81 e4       	ldi	r24, 0x41	; 65
     40a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	81 e4       	ldi	r24, 0x41	; 65
     412:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	81 e4       	ldi	r24, 0x41	; 65
     41a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_3);
     41e:	63 e0       	ldi	r22, 0x03	; 3
     420:	81 e4       	ldi	r24, 0x41	; 65
     422:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     426:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
			LED_OFF(Port_A, PIN_0);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	81 e4       	ldi	r24, 0x41	; 65
     42e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	81 e4       	ldi	r24, 0x41	; 65
     436:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     43a:	62 e0       	ldi	r22, 0x02	; 2
     43c:	81 e4       	ldi	r24, 0x41	; 65
     43e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	81 e4       	ldi	r24, 0x41	; 65
     446:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     44a:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
     44e:	10 c4       	rjmp	.+2080   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==4)
     450:	84 30       	cpi	r24, 0x04	; 4
     452:	29 f5       	brne	.+74     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		{
			LED_ON(Port_A, PIN_0);
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	81 e4       	ldi	r24, 0x41	; 65
     458:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	81 e4       	ldi	r24, 0x41	; 65
     460:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     464:	62 e0       	ldi	r22, 0x02	; 2
     466:	81 e4       	ldi	r24, 0x41	; 65
     468:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     46c:	63 e0       	ldi	r22, 0x03	; 3
     46e:	81 e4       	ldi	r24, 0x41	; 65
     470:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_200ms();
     474:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
			LED_OFF(Port_A, PIN_0);
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	81 e4       	ldi	r24, 0x41	; 65
     47c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     480:	61 e0       	ldi	r22, 0x01	; 1
     482:	81 e4       	ldi	r24, 0x41	; 65
     484:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     488:	62 e0       	ldi	r22, 0x02	; 2
     48a:	81 e4       	ldi	r24, 0x41	; 65
     48c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     490:	63 e0       	ldi	r22, 0x03	; 3
     492:	81 e4       	ldi	r24, 0x41	; 65
     494:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     498:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
     49c:	e9 c3       	rjmp	.+2002   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==5)
     49e:	85 30       	cpi	r24, 0x05	; 5
     4a0:	29 f5       	brne	.+74     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
		{
			LED_OFF(Port_A, PIN_0);
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	81 e4       	ldi	r24, 0x41	; 65
     4a6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_1);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	81 e4       	ldi	r24, 0x41	; 65
     4ae:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     4b2:	62 e0       	ldi	r22, 0x02	; 2
     4b4:	81 e4       	ldi	r24, 0x41	; 65
     4b6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     4ba:	63 e0       	ldi	r22, 0x03	; 3
     4bc:	81 e4       	ldi	r24, 0x41	; 65
     4be:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_200ms();
     4c2:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
			LED_OFF(Port_A, PIN_0);
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	81 e4       	ldi	r24, 0x41	; 65
     4ca:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	81 e4       	ldi	r24, 0x41	; 65
     4d2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     4d6:	62 e0       	ldi	r22, 0x02	; 2
     4d8:	81 e4       	ldi	r24, 0x41	; 65
     4da:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     4de:	63 e0       	ldi	r22, 0x03	; 3
     4e0:	81 e4       	ldi	r24, 0x41	; 65
     4e2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     4e6:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
     4ea:	c2 c3       	rjmp	.+1924   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==6)
     4ec:	86 30       	cpi	r24, 0x06	; 6
     4ee:	29 f5       	brne	.+74     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
		{
			LED_OFF(Port_A, PIN_0);
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	81 e4       	ldi	r24, 0x41	; 65
     4f4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	81 e4       	ldi	r24, 0x41	; 65
     4fc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_2);
     500:	62 e0       	ldi	r22, 0x02	; 2
     502:	81 e4       	ldi	r24, 0x41	; 65
     504:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     508:	63 e0       	ldi	r22, 0x03	; 3
     50a:	81 e4       	ldi	r24, 0x41	; 65
     50c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_200ms();
     510:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
			LED_OFF(Port_A, PIN_0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	81 e4       	ldi	r24, 0x41	; 65
     518:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e4       	ldi	r24, 0x41	; 65
     520:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     524:	62 e0       	ldi	r22, 0x02	; 2
     526:	81 e4       	ldi	r24, 0x41	; 65
     528:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     52c:	63 e0       	ldi	r22, 0x03	; 3
     52e:	81 e4       	ldi	r24, 0x41	; 65
     530:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     534:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
     538:	9b c3       	rjmp	.+1846   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==7)
     53a:	87 30       	cpi	r24, 0x07	; 7
     53c:	09 f0       	breq	.+2      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
     53e:	98 c3       	rjmp	.+1840   	; 0xc70 <__stack+0x411>
		{
			LED_OFF(Port_A, PIN_0);
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	81 e4       	ldi	r24, 0x41	; 65
     544:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	81 e4       	ldi	r24, 0x41	; 65
     54c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	81 e4       	ldi	r24, 0x41	; 65
     554:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_3);
     558:	63 e0       	ldi	r22, 0x03	; 3
     55a:	81 e4       	ldi	r24, 0x41	; 65
     55c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_200ms();
     560:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
			LED_OFF(Port_A, PIN_0);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	81 e4       	ldi	r24, 0x41	; 65
     568:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	81 e4       	ldi	r24, 0x41	; 65
     570:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     574:	62 e0       	ldi	r22, 0x02	; 2
     576:	81 e4       	ldi	r24, 0x41	; 65
     578:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     57c:	63 e0       	ldi	r22, 0x03	; 3
     57e:	81 e4       	ldi	r24, 0x41	; 65
     580:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     584:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
     588:	73 c3       	rjmp	.+1766   	; 0xc70 <__stack+0x411>
		}
		break;
		case 3:
		if(PB0_state==0)
     58a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     58e:	81 11       	cpse	r24, r1
     590:	11 c0       	rjmp	.+34     	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
		{
			LED_OFF(Port_A, PIN_0);
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	81 e4       	ldi	r24, 0x41	; 65
     596:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	81 e4       	ldi	r24, 0x41	; 65
     59e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     5a2:	62 e0       	ldi	r22, 0x02	; 2
     5a4:	81 e4       	ldi	r24, 0x41	; 65
     5a6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     5aa:	63 e0       	ldi	r22, 0x03	; 3
     5ac:	81 e4       	ldi	r24, 0x41	; 65
     5ae:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
     5b2:	5e c3       	rjmp	.+1724   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==1)
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	29 f5       	brne	.+74     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
		{
			LED_ON(Port_A, PIN_0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	81 e4       	ldi	r24, 0x41	; 65
     5bc:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_1);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	81 e4       	ldi	r24, 0x41	; 65
     5c4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	81 e4       	ldi	r24, 0x41	; 65
     5cc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     5d0:	63 e0       	ldi	r22, 0x03	; 3
     5d2:	81 e4       	ldi	r24, 0x41	; 65
     5d4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_300ms();
     5d8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <delay_300ms>
			LED_OFF(Port_A, PIN_0);
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	81 e4       	ldi	r24, 0x41	; 65
     5e0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	81 e4       	ldi	r24, 0x41	; 65
     5e8:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     5ec:	62 e0       	ldi	r22, 0x02	; 2
     5ee:	81 e4       	ldi	r24, 0x41	; 65
     5f0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     5f4:	63 e0       	ldi	r22, 0x03	; 3
     5f6:	81 e4       	ldi	r24, 0x41	; 65
     5f8:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_700ms();
     5fc:	0e 94 d3 06 	call	0xda6	; 0xda6 <delay_700ms>
     600:	37 c3       	rjmp	.+1646   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==2)
     602:	82 30       	cpi	r24, 0x02	; 2
     604:	29 f5       	brne	.+74     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			LED_ON(Port_A, PIN_0);
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	81 e4       	ldi	r24, 0x41	; 65
     60a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	81 e4       	ldi	r24, 0x41	; 65
     612:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_2);
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	81 e4       	ldi	r24, 0x41	; 65
     61a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     61e:	63 e0       	ldi	r22, 0x03	; 3
     620:	81 e4       	ldi	r24, 0x41	; 65
     622:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_300ms();
     626:	0e 94 bd 06 	call	0xd7a	; 0xd7a <delay_300ms>
			LED_OFF(Port_A, PIN_0);
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	81 e4       	ldi	r24, 0x41	; 65
     62e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	81 e4       	ldi	r24, 0x41	; 65
     636:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     63a:	62 e0       	ldi	r22, 0x02	; 2
     63c:	81 e4       	ldi	r24, 0x41	; 65
     63e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     642:	63 e0       	ldi	r22, 0x03	; 3
     644:	81 e4       	ldi	r24, 0x41	; 65
     646:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_700ms();
     64a:	0e 94 d3 06 	call	0xda6	; 0xda6 <delay_700ms>
     64e:	10 c3       	rjmp	.+1568   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==3)
     650:	83 30       	cpi	r24, 0x03	; 3
     652:	29 f5       	brne	.+74     	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
		{
			LED_ON(Port_A, PIN_0);
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	81 e4       	ldi	r24, 0x41	; 65
     658:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	81 e4       	ldi	r24, 0x41	; 65
     660:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     664:	62 e0       	ldi	r22, 0x02	; 2
     666:	81 e4       	ldi	r24, 0x41	; 65
     668:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_3);
     66c:	63 e0       	ldi	r22, 0x03	; 3
     66e:	81 e4       	ldi	r24, 0x41	; 65
     670:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_300ms();
     674:	0e 94 bd 06 	call	0xd7a	; 0xd7a <delay_300ms>
			LED_OFF(Port_A, PIN_0);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	81 e4       	ldi	r24, 0x41	; 65
     67c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	81 e4       	ldi	r24, 0x41	; 65
     684:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     688:	62 e0       	ldi	r22, 0x02	; 2
     68a:	81 e4       	ldi	r24, 0x41	; 65
     68c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     690:	63 e0       	ldi	r22, 0x03	; 3
     692:	81 e4       	ldi	r24, 0x41	; 65
     694:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_700ms();
     698:	0e 94 d3 06 	call	0xda6	; 0xda6 <delay_700ms>
     69c:	e9 c2       	rjmp	.+1490   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==4)
     69e:	84 30       	cpi	r24, 0x04	; 4
     6a0:	29 f5       	brne	.+74     	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
		{
			LED_ON(Port_A, PIN_0);
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	81 e4       	ldi	r24, 0x41	; 65
     6a6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	81 e4       	ldi	r24, 0x41	; 65
     6ae:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     6b2:	62 e0       	ldi	r22, 0x02	; 2
     6b4:	81 e4       	ldi	r24, 0x41	; 65
     6b6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     6ba:	63 e0       	ldi	r22, 0x03	; 3
     6bc:	81 e4       	ldi	r24, 0x41	; 65
     6be:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_300ms();
     6c2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <delay_300ms>
			LED_OFF(Port_A, PIN_0);
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	81 e4       	ldi	r24, 0x41	; 65
     6ca:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	81 e4       	ldi	r24, 0x41	; 65
     6d2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     6d6:	62 e0       	ldi	r22, 0x02	; 2
     6d8:	81 e4       	ldi	r24, 0x41	; 65
     6da:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     6de:	63 e0       	ldi	r22, 0x03	; 3
     6e0:	81 e4       	ldi	r24, 0x41	; 65
     6e2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_700ms();
     6e6:	0e 94 d3 06 	call	0xda6	; 0xda6 <delay_700ms>
     6ea:	c2 c2       	rjmp	.+1412   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==5)
     6ec:	85 30       	cpi	r24, 0x05	; 5
     6ee:	29 f5       	brne	.+74     	; 0x73a <__EEPROM_REGION_LENGTH__+0x33a>
		{
			LED_OFF(Port_A, PIN_0);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	81 e4       	ldi	r24, 0x41	; 65
     6f4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_1);
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	81 e4       	ldi	r24, 0x41	; 65
     6fc:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     700:	62 e0       	ldi	r22, 0x02	; 2
     702:	81 e4       	ldi	r24, 0x41	; 65
     704:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     708:	63 e0       	ldi	r22, 0x03	; 3
     70a:	81 e4       	ldi	r24, 0x41	; 65
     70c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_300ms();
     710:	0e 94 bd 06 	call	0xd7a	; 0xd7a <delay_300ms>
			LED_OFF(Port_A, PIN_0);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	81 e4       	ldi	r24, 0x41	; 65
     718:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	81 e4       	ldi	r24, 0x41	; 65
     720:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     724:	62 e0       	ldi	r22, 0x02	; 2
     726:	81 e4       	ldi	r24, 0x41	; 65
     728:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     72c:	63 e0       	ldi	r22, 0x03	; 3
     72e:	81 e4       	ldi	r24, 0x41	; 65
     730:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_700ms();
     734:	0e 94 d3 06 	call	0xda6	; 0xda6 <delay_700ms>
     738:	9b c2       	rjmp	.+1334   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==6)
     73a:	86 30       	cpi	r24, 0x06	; 6
     73c:	29 f5       	brne	.+74     	; 0x788 <__EEPROM_REGION_LENGTH__+0x388>
		{
			LED_OFF(Port_A, PIN_0);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	81 e4       	ldi	r24, 0x41	; 65
     742:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	81 e4       	ldi	r24, 0x41	; 65
     74a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_2);
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	81 e4       	ldi	r24, 0x41	; 65
     752:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     756:	63 e0       	ldi	r22, 0x03	; 3
     758:	81 e4       	ldi	r24, 0x41	; 65
     75a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_300ms();
     75e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <delay_300ms>
			LED_OFF(Port_A, PIN_0);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	81 e4       	ldi	r24, 0x41	; 65
     766:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	81 e4       	ldi	r24, 0x41	; 65
     76e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     772:	62 e0       	ldi	r22, 0x02	; 2
     774:	81 e4       	ldi	r24, 0x41	; 65
     776:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	81 e4       	ldi	r24, 0x41	; 65
     77e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_700ms();
     782:	0e 94 d3 06 	call	0xda6	; 0xda6 <delay_700ms>
     786:	74 c2       	rjmp	.+1256   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==7)
     788:	87 30       	cpi	r24, 0x07	; 7
     78a:	09 f0       	breq	.+2      	; 0x78e <__EEPROM_REGION_LENGTH__+0x38e>
     78c:	71 c2       	rjmp	.+1250   	; 0xc70 <__stack+0x411>
		{
			LED_OFF(Port_A, PIN_0);
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	81 e4       	ldi	r24, 0x41	; 65
     792:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	81 e4       	ldi	r24, 0x41	; 65
     79a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     79e:	62 e0       	ldi	r22, 0x02	; 2
     7a0:	81 e4       	ldi	r24, 0x41	; 65
     7a2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_3);
     7a6:	63 e0       	ldi	r22, 0x03	; 3
     7a8:	81 e4       	ldi	r24, 0x41	; 65
     7aa:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_300ms();
     7ae:	0e 94 bd 06 	call	0xd7a	; 0xd7a <delay_300ms>
			LED_OFF(Port_A, PIN_0);
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	81 e4       	ldi	r24, 0x41	; 65
     7b6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	81 e4       	ldi	r24, 0x41	; 65
     7be:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	81 e4       	ldi	r24, 0x41	; 65
     7c6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	81 e4       	ldi	r24, 0x41	; 65
     7ce:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_700ms();
     7d2:	0e 94 d3 06 	call	0xda6	; 0xda6 <delay_700ms>
     7d6:	4c c2       	rjmp	.+1176   	; 0xc70 <__stack+0x411>
		}
		break;
		case 4:
		if(PB0_state==0)
     7d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     7dc:	81 11       	cpse	r24, r1
     7de:	11 c0       	rjmp	.+34     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		{
			LED_OFF(Port_A, PIN_0);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	81 e4       	ldi	r24, 0x41	; 65
     7e4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	81 e4       	ldi	r24, 0x41	; 65
     7ec:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     7f0:	62 e0       	ldi	r22, 0x02	; 2
     7f2:	81 e4       	ldi	r24, 0x41	; 65
     7f4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     7f8:	63 e0       	ldi	r22, 0x03	; 3
     7fa:	81 e4       	ldi	r24, 0x41	; 65
     7fc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
     800:	37 c2       	rjmp	.+1134   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==1)
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	29 f5       	brne	.+74     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		{
			LED_ON(Port_A, PIN_0);
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	81 e4       	ldi	r24, 0x41	; 65
     80a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_1);
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	81 e4       	ldi	r24, 0x41	; 65
     812:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     816:	62 e0       	ldi	r22, 0x02	; 2
     818:	81 e4       	ldi	r24, 0x41	; 65
     81a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     81e:	63 e0       	ldi	r22, 0x03	; 3
     820:	81 e4       	ldi	r24, 0x41	; 65
     822:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     826:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
			LED_OFF(Port_A, PIN_0);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	81 e4       	ldi	r24, 0x41	; 65
     82e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	81 e4       	ldi	r24, 0x41	; 65
     836:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     83a:	62 e0       	ldi	r22, 0x02	; 2
     83c:	81 e4       	ldi	r24, 0x41	; 65
     83e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     842:	63 e0       	ldi	r22, 0x03	; 3
     844:	81 e4       	ldi	r24, 0x41	; 65
     846:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     84a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
     84e:	10 c2       	rjmp	.+1056   	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==2)
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	29 f5       	brne	.+74     	; 0x89e <__stack+0x3f>
		{
			LED_ON(Port_A, PIN_0);
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	81 e4       	ldi	r24, 0x41	; 65
     858:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	81 e4       	ldi	r24, 0x41	; 65
     860:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_2);
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	81 e4       	ldi	r24, 0x41	; 65
     868:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     86c:	63 e0       	ldi	r22, 0x03	; 3
     86e:	81 e4       	ldi	r24, 0x41	; 65
     870:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     874:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
			LED_OFF(Port_A, PIN_0);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	81 e4       	ldi	r24, 0x41	; 65
     87c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	81 e4       	ldi	r24, 0x41	; 65
     884:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     888:	62 e0       	ldi	r22, 0x02	; 2
     88a:	81 e4       	ldi	r24, 0x41	; 65
     88c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	81 e4       	ldi	r24, 0x41	; 65
     894:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     898:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
     89c:	e9 c1       	rjmp	.+978    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==3)
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	29 f5       	brne	.+74     	; 0x8ec <__stack+0x8d>
		{
			LED_ON(Port_A, PIN_0);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	81 e4       	ldi	r24, 0x41	; 65
     8a6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	81 e4       	ldi	r24, 0x41	; 65
     8ae:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     8b2:	62 e0       	ldi	r22, 0x02	; 2
     8b4:	81 e4       	ldi	r24, 0x41	; 65
     8b6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_3);
     8ba:	63 e0       	ldi	r22, 0x03	; 3
     8bc:	81 e4       	ldi	r24, 0x41	; 65
     8be:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     8c2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
			LED_OFF(Port_A, PIN_0);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	81 e4       	ldi	r24, 0x41	; 65
     8ca:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	81 e4       	ldi	r24, 0x41	; 65
     8d2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	81 e4       	ldi	r24, 0x41	; 65
     8da:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     8de:	63 e0       	ldi	r22, 0x03	; 3
     8e0:	81 e4       	ldi	r24, 0x41	; 65
     8e2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     8e6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
     8ea:	c2 c1       	rjmp	.+900    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==4)
     8ec:	84 30       	cpi	r24, 0x04	; 4
     8ee:	29 f5       	brne	.+74     	; 0x93a <__stack+0xdb>
		{
			LED_ON(Port_A, PIN_0);
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	81 e4       	ldi	r24, 0x41	; 65
     8f4:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	81 e4       	ldi	r24, 0x41	; 65
     8fc:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     900:	62 e0       	ldi	r22, 0x02	; 2
     902:	81 e4       	ldi	r24, 0x41	; 65
     904:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     908:	63 e0       	ldi	r22, 0x03	; 3
     90a:	81 e4       	ldi	r24, 0x41	; 65
     90c:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_500ms();
     910:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
			LED_OFF(Port_A, PIN_0);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	81 e4       	ldi	r24, 0x41	; 65
     918:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	81 e4       	ldi	r24, 0x41	; 65
     920:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     924:	62 e0       	ldi	r22, 0x02	; 2
     926:	81 e4       	ldi	r24, 0x41	; 65
     928:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     92c:	63 e0       	ldi	r22, 0x03	; 3
     92e:	81 e4       	ldi	r24, 0x41	; 65
     930:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     934:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
     938:	9b c1       	rjmp	.+822    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==5)
     93a:	85 30       	cpi	r24, 0x05	; 5
     93c:	29 f5       	brne	.+74     	; 0x988 <__stack+0x129>
		{
			LED_OFF(Port_A, PIN_0);
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	81 e4       	ldi	r24, 0x41	; 65
     942:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_1);
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	81 e4       	ldi	r24, 0x41	; 65
     94a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	81 e4       	ldi	r24, 0x41	; 65
     952:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     956:	63 e0       	ldi	r22, 0x03	; 3
     958:	81 e4       	ldi	r24, 0x41	; 65
     95a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_500ms();
     95e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
			LED_OFF(Port_A, PIN_0);
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	81 e4       	ldi	r24, 0x41	; 65
     966:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	81 e4       	ldi	r24, 0x41	; 65
     96e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     972:	62 e0       	ldi	r22, 0x02	; 2
     974:	81 e4       	ldi	r24, 0x41	; 65
     976:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     97a:	63 e0       	ldi	r22, 0x03	; 3
     97c:	81 e4       	ldi	r24, 0x41	; 65
     97e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     982:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
     986:	74 c1       	rjmp	.+744    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==6)
     988:	86 30       	cpi	r24, 0x06	; 6
     98a:	29 f5       	brne	.+74     	; 0x9d6 <__stack+0x177>
		{
			LED_OFF(Port_A, PIN_0);
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	81 e4       	ldi	r24, 0x41	; 65
     990:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	81 e4       	ldi	r24, 0x41	; 65
     998:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_2);
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	81 e4       	ldi	r24, 0x41	; 65
     9a0:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     9a4:	63 e0       	ldi	r22, 0x03	; 3
     9a6:	81 e4       	ldi	r24, 0x41	; 65
     9a8:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_500ms();
     9ac:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
			LED_OFF(Port_A, PIN_0);
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	81 e4       	ldi	r24, 0x41	; 65
     9b4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	81 e4       	ldi	r24, 0x41	; 65
     9bc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     9c0:	62 e0       	ldi	r22, 0x02	; 2
     9c2:	81 e4       	ldi	r24, 0x41	; 65
     9c4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     9c8:	63 e0       	ldi	r22, 0x03	; 3
     9ca:	81 e4       	ldi	r24, 0x41	; 65
     9cc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     9d0:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
     9d4:	4d c1       	rjmp	.+666    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==7)
     9d6:	87 30       	cpi	r24, 0x07	; 7
     9d8:	09 f0       	breq	.+2      	; 0x9dc <__stack+0x17d>
     9da:	4a c1       	rjmp	.+660    	; 0xc70 <__stack+0x411>
		{
			LED_OFF(Port_A, PIN_0);
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	81 e4       	ldi	r24, 0x41	; 65
     9e0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	81 e4       	ldi	r24, 0x41	; 65
     9e8:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	81 e4       	ldi	r24, 0x41	; 65
     9f0:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_3);
     9f4:	63 e0       	ldi	r22, 0x03	; 3
     9f6:	81 e4       	ldi	r24, 0x41	; 65
     9f8:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_500ms();
     9fc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
			LED_OFF(Port_A, PIN_0);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	81 e4       	ldi	r24, 0x41	; 65
     a04:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	81 e4       	ldi	r24, 0x41	; 65
     a0c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     a10:	62 e0       	ldi	r22, 0x02	; 2
     a12:	81 e4       	ldi	r24, 0x41	; 65
     a14:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     a18:	63 e0       	ldi	r22, 0x03	; 3
     a1a:	81 e4       	ldi	r24, 0x41	; 65
     a1c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_500ms();
     a20:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <delay_500ms>
     a24:	25 c1       	rjmp	.+586    	; 0xc70 <__stack+0x411>
		}
		break;
		case 5:
		if(PB0_state==0)
     a26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     a2a:	81 11       	cpse	r24, r1
     a2c:	11 c0       	rjmp	.+34     	; 0xa50 <__stack+0x1f1>
		{
			LED_OFF(Port_A, PIN_0);
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	81 e4       	ldi	r24, 0x41	; 65
     a32:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	81 e4       	ldi	r24, 0x41	; 65
     a3a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	81 e4       	ldi	r24, 0x41	; 65
     a42:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     a46:	63 e0       	ldi	r22, 0x03	; 3
     a48:	81 e4       	ldi	r24, 0x41	; 65
     a4a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
     a4e:	10 c1       	rjmp	.+544    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==1)
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	29 f5       	brne	.+74     	; 0xa9e <__stack+0x23f>
		{
			LED_ON(Port_A, PIN_0);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	81 e4       	ldi	r24, 0x41	; 65
     a58:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_1);
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	81 e4       	ldi	r24, 0x41	; 65
     a60:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     a64:	62 e0       	ldi	r22, 0x02	; 2
     a66:	81 e4       	ldi	r24, 0x41	; 65
     a68:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     a6c:	63 e0       	ldi	r22, 0x03	; 3
     a6e:	81 e4       	ldi	r24, 0x41	; 65
     a70:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     a74:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
			LED_OFF(Port_A, PIN_0);
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	81 e4       	ldi	r24, 0x41	; 65
     a7c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	81 e4       	ldi	r24, 0x41	; 65
     a84:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     a88:	62 e0       	ldi	r22, 0x02	; 2
     a8a:	81 e4       	ldi	r24, 0x41	; 65
     a8c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	81 e4       	ldi	r24, 0x41	; 65
     a94:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     a98:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
     a9c:	e9 c0       	rjmp	.+466    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==2)
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	29 f5       	brne	.+74     	; 0xaec <__stack+0x28d>
		{
			LED_ON(Port_A, PIN_0);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	81 e4       	ldi	r24, 0x41	; 65
     aa6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	81 e4       	ldi	r24, 0x41	; 65
     aae:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_2);
     ab2:	62 e0       	ldi	r22, 0x02	; 2
     ab4:	81 e4       	ldi	r24, 0x41	; 65
     ab6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     aba:	63 e0       	ldi	r22, 0x03	; 3
     abc:	81 e4       	ldi	r24, 0x41	; 65
     abe:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     ac2:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
			LED_OFF(Port_A, PIN_0);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	81 e4       	ldi	r24, 0x41	; 65
     aca:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	81 e4       	ldi	r24, 0x41	; 65
     ad2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     ad6:	62 e0       	ldi	r22, 0x02	; 2
     ad8:	81 e4       	ldi	r24, 0x41	; 65
     ada:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     ade:	63 e0       	ldi	r22, 0x03	; 3
     ae0:	81 e4       	ldi	r24, 0x41	; 65
     ae2:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     ae6:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
     aea:	c2 c0       	rjmp	.+388    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==3)
     aec:	83 30       	cpi	r24, 0x03	; 3
     aee:	29 f5       	brne	.+74     	; 0xb3a <__stack+0x2db>
		{
			LED_ON(Port_A, PIN_0);
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	81 e4       	ldi	r24, 0x41	; 65
     af4:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	81 e4       	ldi	r24, 0x41	; 65
     afc:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     b00:	62 e0       	ldi	r22, 0x02	; 2
     b02:	81 e4       	ldi	r24, 0x41	; 65
     b04:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_OFF(Port_A, PIN_3);
     b08:	63 e0       	ldi	r22, 0x03	; 3
     b0a:	81 e4       	ldi	r24, 0x41	; 65
     b0c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_800ms();
     b10:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
			LED_OFF(Port_A, PIN_0);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	81 e4       	ldi	r24, 0x41	; 65
     b18:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	81 e4       	ldi	r24, 0x41	; 65
     b20:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     b24:	62 e0       	ldi	r22, 0x02	; 2
     b26:	81 e4       	ldi	r24, 0x41	; 65
     b28:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     b2c:	63 e0       	ldi	r22, 0x03	; 3
     b2e:	81 e4       	ldi	r24, 0x41	; 65
     b30:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     b34:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
     b38:	9b c0       	rjmp	.+310    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==4)
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	29 f5       	brne	.+74     	; 0xb88 <__stack+0x329>
		{
			LED_ON(Port_A, PIN_0);
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	81 e4       	ldi	r24, 0x41	; 65
     b42:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_1);
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	81 e4       	ldi	r24, 0x41	; 65
     b4a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	81 e4       	ldi	r24, 0x41	; 65
     b52:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     b56:	63 e0       	ldi	r22, 0x03	; 3
     b58:	81 e4       	ldi	r24, 0x41	; 65
     b5a:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_800ms();
     b5e:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
			LED_OFF(Port_A, PIN_0);
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	81 e4       	ldi	r24, 0x41	; 65
     b66:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	81 e4       	ldi	r24, 0x41	; 65
     b6e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	81 e4       	ldi	r24, 0x41	; 65
     b76:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     b7a:	63 e0       	ldi	r22, 0x03	; 3
     b7c:	81 e4       	ldi	r24, 0x41	; 65
     b7e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     b82:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
     b86:	74 c0       	rjmp	.+232    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==5)
     b88:	85 30       	cpi	r24, 0x05	; 5
     b8a:	29 f5       	brne	.+74     	; 0xbd6 <__stack+0x377>
		{
			LED_OFF(Port_A, PIN_0);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	81 e4       	ldi	r24, 0x41	; 65
     b90:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_1);
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	81 e4       	ldi	r24, 0x41	; 65
     b98:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_2);
     b9c:	62 e0       	ldi	r22, 0x02	; 2
     b9e:	81 e4       	ldi	r24, 0x41	; 65
     ba0:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     ba4:	63 e0       	ldi	r22, 0x03	; 3
     ba6:	81 e4       	ldi	r24, 0x41	; 65
     ba8:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_800ms();
     bac:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
			LED_OFF(Port_A, PIN_0);
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	81 e4       	ldi	r24, 0x41	; 65
     bb4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	81 e4       	ldi	r24, 0x41	; 65
     bbc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     bc0:	62 e0       	ldi	r22, 0x02	; 2
     bc2:	81 e4       	ldi	r24, 0x41	; 65
     bc4:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     bc8:	63 e0       	ldi	r22, 0x03	; 3
     bca:	81 e4       	ldi	r24, 0x41	; 65
     bcc:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     bd0:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
     bd4:	4d c0       	rjmp	.+154    	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==6)
     bd6:	86 30       	cpi	r24, 0x06	; 6
     bd8:	29 f5       	brne	.+74     	; 0xc24 <__stack+0x3c5>
		{
			LED_OFF(Port_A, PIN_0);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	81 e4       	ldi	r24, 0x41	; 65
     bde:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	81 e4       	ldi	r24, 0x41	; 65
     be6:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_2);
     bea:	62 e0       	ldi	r22, 0x02	; 2
     bec:	81 e4       	ldi	r24, 0x41	; 65
     bee:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			LED_ON(Port_A, PIN_3);
     bf2:	63 e0       	ldi	r22, 0x03	; 3
     bf4:	81 e4       	ldi	r24, 0x41	; 65
     bf6:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_800ms();
     bfa:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
			LED_OFF(Port_A, PIN_0);
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	81 e4       	ldi	r24, 0x41	; 65
     c02:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	81 e4       	ldi	r24, 0x41	; 65
     c0a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     c0e:	62 e0       	ldi	r22, 0x02	; 2
     c10:	81 e4       	ldi	r24, 0x41	; 65
     c12:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     c16:	63 e0       	ldi	r22, 0x03	; 3
     c18:	81 e4       	ldi	r24, 0x41	; 65
     c1a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     c1e:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
     c22:	26 c0       	rjmp	.+76     	; 0xc70 <__stack+0x411>
		}
		else if(PB0_state==7)
     c24:	87 30       	cpi	r24, 0x07	; 7
     c26:	21 f5       	brne	.+72     	; 0xc70 <__stack+0x411>
		{
			LED_OFF(Port_A, PIN_0);
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	81 e4       	ldi	r24, 0x41	; 65
     c2c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	81 e4       	ldi	r24, 0x41	; 65
     c34:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     c38:	62 e0       	ldi	r22, 0x02	; 2
     c3a:	81 e4       	ldi	r24, 0x41	; 65
     c3c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_ON(Port_A, PIN_3);
     c40:	63 e0       	ldi	r22, 0x03	; 3
     c42:	81 e4       	ldi	r24, 0x41	; 65
     c44:	0e 94 1c 07 	call	0xe38	; 0xe38 <LED_ON>
			delay_800ms();
     c48:	0e 94 a8 06 	call	0xd50	; 0xd50 <delay_800ms>
			LED_OFF(Port_A, PIN_0);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	81 e4       	ldi	r24, 0x41	; 65
     c50:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_1);
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	81 e4       	ldi	r24, 0x41	; 65
     c58:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_2);
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	81 e4       	ldi	r24, 0x41	; 65
     c60:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			LED_OFF(Port_A, PIN_3);
     c64:	63 e0       	ldi	r22, 0x03	; 3
     c66:	81 e4       	ldi	r24, 0x41	; 65
     c68:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_OFF>
			delay_200ms();
     c6c:	0e 94 93 06 	call	0xd26	; 0xd26 <delay_200ms>
		}
		break;
	}
	return 0;
}
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	08 95       	ret

00000c76 <__vector_1>:

ISR(__vector_1)
{
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	8f 93       	push	r24
	if(PB0_state<7)
     c82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     c86:	87 30       	cpi	r24, 0x07	; 7
     c88:	20 f4       	brcc	.+8      	; 0xc92 <__vector_1+0x1c>
	PB0_state++;
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <__vector_1+0x20>
	else
	PB0_state=0;
     c92:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
}
     c96:	8f 91       	pop	r24
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_2>:

ISR(__vector_2)
{
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	8f 93       	push	r24
	if(Blink_state<5)
     cae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     cb2:	85 30       	cpi	r24, 0x05	; 5
     cb4:	20 f4       	brcc	.+8      	; 0xcbe <__vector_2+0x1c>
	Blink_state++;
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <__vector_2+0x22>
	else
	Blink_state=1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     cc4:	8f 91       	pop	r24
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <delay_100ms>:

unsigned int timer;

int delay_100ms(void)
{
	timer=0;
     cd0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer+0x1>
     cd4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer>
	timer0_init(Normal, 44);
     cd8:	6c e2       	ldi	r22, 0x2C	; 44
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 b5 08 	call	0x116a	; 0x116a <timer0_init>
	start_timer0(8);
     ce0:	88 e0       	ldi	r24, 0x08	; 8
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <start_timer0>
	while(timer < 49);
     ce8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     cec:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     cf0:	c1 97       	sbiw	r24, 0x31	; 49
     cf2:	d0 f3       	brcs	.-12     	; 0xce8 <delay_100ms+0x18>
	return 0;
}
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	08 95       	ret

00000cfa <delay_900ms>:

int delay_900ms(void)
{
	timer=0;
     cfa:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer+0x1>
     cfe:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer>
	timer0_init(Normal, 140);
     d02:	6c e8       	ldi	r22, 0x8C	; 140
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	0e 94 b5 08 	call	0x116a	; 0x116a <timer0_init>
	start_timer0(8);
     d0a:	88 e0       	ldi	r24, 0x08	; 8
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <start_timer0>
	while(timer < 440);
     d12:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     d16:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     d1a:	88 3b       	cpi	r24, 0xB8	; 184
     d1c:	91 40       	sbci	r25, 0x01	; 1
     d1e:	c8 f3       	brcs	.-14     	; 0xd12 <delay_900ms+0x18>
	return 0;
}
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	08 95       	ret

00000d26 <delay_200ms>:

int delay_200ms(void)
{
	timer=0;
     d26:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer+0x1>
     d2a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer>
	timer0_init(Normal, 203);
     d2e:	6b ec       	ldi	r22, 0xCB	; 203
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	0e 94 b5 08 	call	0x116a	; 0x116a <timer0_init>
	start_timer0(64);
     d36:	80 e4       	ldi	r24, 0x40	; 64
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <start_timer0>
	while(timer < 13);
     d3e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     d42:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     d46:	0d 97       	sbiw	r24, 0x0d	; 13
     d48:	d0 f3       	brcs	.-12     	; 0xd3e <delay_200ms+0x18>
	return 0;
}
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	08 95       	ret

00000d50 <delay_800ms>:

int delay_800ms(void)
{
	timer=0;
     d50:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer+0x1>
     d54:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer>
	timer0_init(Normal, 203);
     d58:	6b ec       	ldi	r22, 0xCB	; 203
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0e 94 b5 08 	call	0x116a	; 0x116a <timer0_init>
	start_timer0(256);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 e6 08 	call	0x11cc	; 0x11cc <start_timer0>
	while(timer < 13);
     d68:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     d6c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     d70:	0d 97       	sbiw	r24, 0x0d	; 13
     d72:	d0 f3       	brcs	.-12     	; 0xd68 <delay_800ms+0x18>
	return 0;
}
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	08 95       	ret

00000d7a <delay_300ms>:

int delay_300ms(void)
{
	timer=0;
     d7a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer+0x1>
     d7e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer>
	timer0_init(Normal, 132);
     d82:	64 e8       	ldi	r22, 0x84	; 132
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 b5 08 	call	0x116a	; 0x116a <timer0_init>
	start_timer0(8);
     d8a:	88 e0       	ldi	r24, 0x08	; 8
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <start_timer0>
	while(timer < 147);
     d92:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     d96:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     d9a:	83 39       	cpi	r24, 0x93	; 147
     d9c:	91 05       	cpc	r25, r1
     d9e:	c8 f3       	brcs	.-14     	; 0xd92 <delay_300ms+0x18>
	return 0;
}
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	08 95       	ret

00000da6 <delay_700ms>:

int delay_700ms(void)
{
	timer=0;
     da6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer+0x1>
     daa:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer>
	timer0_init(Normal, 52);
     dae:	64 e3       	ldi	r22, 0x34	; 52
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	0e 94 b5 08 	call	0x116a	; 0x116a <timer0_init>
	start_timer0(8);
     db6:	88 e0       	ldi	r24, 0x08	; 8
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 e6 08 	call	0x11cc	; 0x11cc <start_timer0>
	while(timer < 342);
     dbe:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     dc2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     dc6:	86 35       	cpi	r24, 0x56	; 86
     dc8:	91 40       	sbci	r25, 0x01	; 1
     dca:	c8 f3       	brcs	.-14     	; 0xdbe <delay_700ms+0x18>
	return 0;
}
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	08 95       	ret

00000dd2 <delay_500ms>:

int delay_500ms(void)
{
	timer=0;
     dd2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer+0x1>
     dd6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timer>
	timer0_init(Normal, 220);
     dda:	6c ed       	ldi	r22, 0xDC	; 220
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 b5 08 	call	0x116a	; 0x116a <timer0_init>
	start_timer0(8);
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <start_timer0>
	while(timer < 245);
     dea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     dee:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     df2:	85 3f       	cpi	r24, 0xF5	; 245
     df4:	91 05       	cpc	r25, r1
     df6:	c8 f3       	brcs	.-14     	; 0xdea <delay_500ms+0x18>
	return 0;
}
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	08 95       	ret

00000dfe <__vector_11>:


ISR(__vector_11)
{
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
	timer++;
     e0c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timer>
     e10:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <timer+0x1>
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <timer+0x1>
     e1a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <timer>
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <LED_init>:


uint8_t LED_init(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_init(Port_number, Pin_number, out) == 0 )
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <DIO_init>
     e32:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
     e36:	08 95       	ret

00000e38 <LED_ON>:


uint8_t LED_ON(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_write(Port_number, Pin_number, high) == 0)
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_write>
     e3e:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
     e42:	08 95       	ret

00000e44 <LED_OFF>:

uint8_t LED_OFF(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_write(Port_number, Pin_number, low) == 0)
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_write>
     e4a:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
     e4e:	08 95       	ret

00000e50 <main>:



int main(void)
{
    app_init();
     e50:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	
   while(1)
   {
		app();
     e54:	0e 94 64 00 	call	0xc8	; 0xc8 <app>
     e58:	fd cf       	rjmp	.-6      	; 0xe54 <main+0x4>

00000e5a <DIO_init>:
#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
	if(PORTNumber == Port_A)
     e5a:	81 34       	cpi	r24, 0x41	; 65
     e5c:	f1 f4       	brne	.+60     	; 0xe9a <DIO_init+0x40>
	{
		if(direction == in)
     e5e:	41 11       	cpse	r20, r1
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <DIO_init+0x22>
		Clear_Bit(DDRA,PinNumber);
     e62:	2a b3       	in	r18, 0x1a	; 26
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_init+0x14>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	6a 95       	dec	r22
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_init+0x10>
     e72:	80 95       	com	r24
     e74:	82 23       	and	r24, r18
     e76:	8a bb       	out	0x1a, r24	; 26

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret
	if(PORTNumber == Port_A)
	{
		if(direction == in)
		Clear_Bit(DDRA,PinNumber);
		else if(direction == out)
     e7c:	41 30       	cpi	r20, 0x01	; 1
     e7e:	09 f0       	breq	.+2      	; 0xe82 <DIO_init+0x28>
     e80:	6a c0       	rjmp	.+212    	; 0xf56 <DIO_init+0xfc>
		Set_Bit(DDRA,PinNumber);
     e82:	2a b3       	in	r18, 0x1a	; 26
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_init+0x34>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	6a 95       	dec	r22
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_init+0x30>
     e92:	82 2b       	or	r24, r18
     e94:	8a bb       	out	0x1a, r24	; 26

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	08 95       	ret
		else if(direction == out)
		Set_Bit(DDRA,PinNumber);
		else
		error=1;
	}
	else if(PORTNumber == Port_B)
     e9a:	82 34       	cpi	r24, 0x42	; 66
     e9c:	f1 f4       	brne	.+60     	; 0xeda <DIO_init+0x80>
	{
		if(direction == in)
     e9e:	41 11       	cpse	r20, r1
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <DIO_init+0x62>
		Clear_Bit(DDRB,PinNumber);
     ea2:	27 b3       	in	r18, 0x17	; 23
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_init+0x54>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	6a 95       	dec	r22
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_init+0x50>
     eb2:	80 95       	com	r24
     eb4:	82 23       	and	r24, r18
     eb6:	87 bb       	out	0x17, r24	; 23

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	08 95       	ret
	}
	else if(PORTNumber == Port_B)
	{
		if(direction == in)
		Clear_Bit(DDRB,PinNumber);
		else if(direction == out)
     ebc:	41 30       	cpi	r20, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <DIO_init+0x68>
     ec0:	4c c0       	rjmp	.+152    	; 0xf5a <DIO_init+0x100>
		Set_Bit(DDRB,PinNumber);
     ec2:	27 b3       	in	r18, 0x17	; 23
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_init+0x74>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	6a 95       	dec	r22
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_init+0x70>
     ed2:	82 2b       	or	r24, r18
     ed4:	87 bb       	out	0x17, r24	; 23

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	08 95       	ret
		Set_Bit(DDRB,PinNumber);
		else
		error=1;
	}
			
	else if(PORTNumber == Port_C)
     eda:	83 34       	cpi	r24, 0x43	; 67
     edc:	e9 f4       	brne	.+58     	; 0xf18 <DIO_init+0xbe>
	{
		if(direction == in)
     ede:	41 11       	cpse	r20, r1
     ee0:	0d c0       	rjmp	.+26     	; 0xefc <DIO_init+0xa2>
		Clear_Bit(DDRC,PinNumber);
     ee2:	24 b3       	in	r18, 0x14	; 20
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_init+0x94>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	6a 95       	dec	r22
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_init+0x90>
     ef2:	80 95       	com	r24
     ef4:	82 23       	and	r24, r18
     ef6:	84 bb       	out	0x14, r24	; 20

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret
			
	else if(PORTNumber == Port_C)
	{
		if(direction == in)
		Clear_Bit(DDRC,PinNumber);
		else if(direction == out)
     efc:	41 30       	cpi	r20, 0x01	; 1
     efe:	79 f5       	brne	.+94     	; 0xf5e <DIO_init+0x104>
		Set_Bit(DDRC,PinNumber);
     f00:	24 b3       	in	r18, 0x14	; 20
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_init+0xb2>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	6a 95       	dec	r22
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_init+0xae>
     f10:	82 2b       	or	r24, r18
     f12:	84 bb       	out	0x14, r24	; 20

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	08 95       	ret
		Set_Bit(DDRC,PinNumber);
		else
		error=1;
	}
		
	else if(PORTNumber == Port_C)
     f18:	83 34       	cpi	r24, 0x43	; 67
     f1a:	19 f5       	brne	.+70     	; 0xf62 <DIO_init+0x108>
	{
		if(direction == in)
     f1c:	41 11       	cpse	r20, r1
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <DIO_init+0xe0>
		Clear_Bit(DDRD,PinNumber);
     f20:	21 b3       	in	r18, 0x11	; 17
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_init+0xd2>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	6a 95       	dec	r22
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_init+0xce>
     f30:	80 95       	com	r24
     f32:	82 23       	and	r24, r18
     f34:	81 bb       	out	0x11, r24	; 17

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	08 95       	ret
		
	else if(PORTNumber == Port_C)
	{
		if(direction == in)
		Clear_Bit(DDRD,PinNumber);
		else if(direction == out)
     f3a:	41 30       	cpi	r20, 0x01	; 1
     f3c:	a1 f4       	brne	.+40     	; 0xf66 <DIO_init+0x10c>
		Set_Bit(DDRD,PinNumber);
     f3e:	21 b3       	in	r18, 0x11	; 17
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_init+0xf0>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	6a 95       	dec	r22
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_init+0xec>
     f4e:	82 2b       	or	r24, r18
     f50:	81 bb       	out	0x11, r24	; 17

#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	08 95       	ret
		if(direction == in)
		Clear_Bit(DDRA,PinNumber);
		else if(direction == out)
		Set_Bit(DDRA,PinNumber);
		else
		error=1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	08 95       	ret
		if(direction == in)
		Clear_Bit(DDRB,PinNumber);
		else if(direction == out)
		Set_Bit(DDRB,PinNumber);
		else
		error=1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	08 95       	ret
		if(direction == in)
		Clear_Bit(DDRC,PinNumber);
		else if(direction == out)
		Set_Bit(DDRC,PinNumber);
		else
		error=1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	08 95       	ret
		else
		error=1;
	}
	else
	{
		error=1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	08 95       	ret
		if(direction == in)
		Clear_Bit(DDRD,PinNumber);
		else if(direction == out)
		Set_Bit(DDRD,PinNumber);
		else
		error=1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
	{
		error=1;
	}
			
	return error;
}
     f68:	08 95       	ret

00000f6a <DIO_write>:
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
		if(PORTNumber == Port_A)
     f6a:	81 34       	cpi	r24, 0x41	; 65
     f6c:	f1 f4       	brne	.+60     	; 0xfaa <DIO_write+0x40>
		{
			if(value == low)
     f6e:	41 11       	cpse	r20, r1
     f70:	0d c0       	rjmp	.+26     	; 0xf8c <DIO_write+0x22>
			Clear_Bit(PORTA,PinNumber);
     f72:	2b b3       	in	r18, 0x1b	; 27
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_write+0x14>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	6a 95       	dec	r22
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_write+0x10>
     f82:	80 95       	com	r24
     f84:	82 23       	and	r24, r18
     f86:	8b bb       	out	0x1b, r24	; 27
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	08 95       	ret
		if(PORTNumber == Port_A)
		{
			if(value == low)
			Clear_Bit(PORTA,PinNumber);
			else if(value == high)
     f8c:	41 30       	cpi	r20, 0x01	; 1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <DIO_write+0x28>
     f90:	6a c0       	rjmp	.+212    	; 0x1066 <DIO_write+0xfc>
			Set_Bit(PORTA,PinNumber);
     f92:	2b b3       	in	r18, 0x1b	; 27
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_write+0x34>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	6a 95       	dec	r22
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_write+0x30>
     fa2:	82 2b       	or	r24, r18
     fa4:	8b bb       	out	0x1b, r24	; 27
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
			else if(value == high)
			Set_Bit(PORTA,PinNumber);
			else
			error=1;
		}
		else if (PORTNumber == Port_B)
     faa:	82 34       	cpi	r24, 0x42	; 66
     fac:	f1 f4       	brne	.+60     	; 0xfea <DIO_write+0x80>
		{
			if(value == low)
     fae:	41 11       	cpse	r20, r1
     fb0:	0d c0       	rjmp	.+26     	; 0xfcc <DIO_write+0x62>
			Clear_Bit(PORTB,PinNumber);
     fb2:	28 b3       	in	r18, 0x18	; 24
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_write+0x54>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	6a 95       	dec	r22
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_write+0x50>
     fc2:	80 95       	com	r24
     fc4:	82 23       	and	r24, r18
     fc6:	88 bb       	out	0x18, r24	; 24
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	08 95       	ret
		}
		else if (PORTNumber == Port_B)
		{
			if(value == low)
			Clear_Bit(PORTB,PinNumber);
			else if(value == high)
     fcc:	41 30       	cpi	r20, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <DIO_write+0x68>
     fd0:	4c c0       	rjmp	.+152    	; 0x106a <DIO_write+0x100>
			Set_Bit(PORTB,PinNumber);
     fd2:	28 b3       	in	r18, 0x18	; 24
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_write+0x74>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	6a 95       	dec	r22
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_write+0x70>
     fe2:	82 2b       	or	r24, r18
     fe4:	88 bb       	out	0x18, r24	; 24
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret
			else if(value == high)
			Set_Bit(PORTB,PinNumber);
			else
			error=1;
		}
		else if (PORTNumber == Port_C)
     fea:	83 34       	cpi	r24, 0x43	; 67
     fec:	e9 f4       	brne	.+58     	; 0x1028 <DIO_write+0xbe>
		{
			if(value == low)
     fee:	41 11       	cpse	r20, r1
     ff0:	0d c0       	rjmp	.+26     	; 0x100c <DIO_write+0xa2>
			Clear_Bit(PORTC,PinNumber);
     ff2:	25 b3       	in	r18, 0x15	; 21
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_write+0x94>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_write+0x90>
    1002:	80 95       	com	r24
    1004:	82 23       	and	r24, r18
    1006:	85 bb       	out	0x15, r24	; 21
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	08 95       	ret
		}
		else if (PORTNumber == Port_C)
		{
			if(value == low)
			Clear_Bit(PORTC,PinNumber);
			else if(value == high)
    100c:	41 30       	cpi	r20, 0x01	; 1
    100e:	79 f5       	brne	.+94     	; 0x106e <DIO_write+0x104>
			Set_Bit(PORTC,PinNumber);
    1010:	25 b3       	in	r18, 0x15	; 21
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_write+0xb2>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	6a 95       	dec	r22
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_write+0xae>
    1020:	82 2b       	or	r24, r18
    1022:	85 bb       	out	0x15, r24	; 21
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	08 95       	ret
			else if(value == high)
			Set_Bit(PORTC,PinNumber);
			else
			error=1;
		}
		else if (PORTNumber == Port_D)
    1028:	84 34       	cpi	r24, 0x44	; 68
    102a:	19 f5       	brne	.+70     	; 0x1072 <DIO_write+0x108>
		{
			if(value == low)
    102c:	41 11       	cpse	r20, r1
    102e:	0d c0       	rjmp	.+26     	; 0x104a <DIO_write+0xe0>
			Clear_Bit(PORTD,PinNumber);
    1030:	22 b3       	in	r18, 0x12	; 18
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_write+0xd2>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	6a 95       	dec	r22
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_write+0xce>
    1040:	80 95       	com	r24
    1042:	82 23       	and	r24, r18
    1044:	82 bb       	out	0x12, r24	; 18
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret
		}
		else if (PORTNumber == Port_D)
		{
			if(value == low)
			Clear_Bit(PORTD,PinNumber);
			else if(value == high)
    104a:	41 30       	cpi	r20, 0x01	; 1
    104c:	a1 f4       	brne	.+40     	; 0x1076 <DIO_write+0x10c>
			Set_Bit(PORTD,PinNumber);
    104e:	22 b3       	in	r18, 0x12	; 18
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_write+0xf0>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_write+0xec>
    105e:	82 2b       	or	r24, r18
    1060:	82 bb       	out	0x12, r24	; 18
	return error;
}
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret
			if(value == low)
			Clear_Bit(PORTA,PinNumber);
			else if(value == high)
			Set_Bit(PORTA,PinNumber);
			else
			error=1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	08 95       	ret
			if(value == low)
			Clear_Bit(PORTB,PinNumber);
			else if(value == high)
			Set_Bit(PORTB,PinNumber);
			else
			error=1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	08 95       	ret
			if(value == low)
			Clear_Bit(PORTC,PinNumber);
			else if(value == high)
			Set_Bit(PORTC,PinNumber);
			else
			error=1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	08 95       	ret
			else
			error=1;
		}
		else
		{
			error=1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	08 95       	ret
			if(value == low)
			Clear_Bit(PORTD,PinNumber);
			else if(value == high)
			Set_Bit(PORTD,PinNumber);
			else
			error=1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			error=1;
		}
		return error;
	}
    1078:	08 95       	ret

0000107a <ex_int_init>:
#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
	Set_Bit(SREG,7);
    107a:	9f b7       	in	r25, 0x3f	; 63
    107c:	90 68       	ori	r25, 0x80	; 128
    107e:	9f bf       	out	0x3f, r25	; 63
	if(ex_int_number == Interrupt_0)
    1080:	81 11       	cpse	r24, r1
    1082:	2d c0       	rjmp	.+90     	; 0x10de <ex_int_init+0x64>
	{
		if(ex_int_mode == low_level)
    1084:	63 30       	cpi	r22, 0x03	; 3
    1086:	41 f4       	brne	.+16     	; 0x1098 <ex_int_init+0x1e>
		{
			Clear_Bit(MCUCR,0);
    1088:	85 b7       	in	r24, 0x35	; 53
    108a:	8e 7f       	andi	r24, 0xFE	; 254
    108c:	85 bf       	out	0x35, r24	; 53
			Clear_Bit(MCUCR,1);
    108e:	85 b7       	in	r24, 0x35	; 53
    1090:	8d 7f       	andi	r24, 0xFD	; 253
    1092:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	1f c0       	rjmp	.+62     	; 0x10d6 <ex_int_init+0x5c>
		if(ex_int_mode == low_level)
		{
			Clear_Bit(MCUCR,0);
			Clear_Bit(MCUCR,1);
		}
		else if(ex_int_mode == any_logical_change)
    1098:	64 30       	cpi	r22, 0x04	; 4
    109a:	41 f4       	brne	.+16     	; 0x10ac <ex_int_init+0x32>
		{
			Set_Bit(MCUCR,0);
    109c:	85 b7       	in	r24, 0x35	; 53
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	85 bf       	out	0x35, r24	; 53
			Clear_Bit(MCUCR,1);
    10a2:	85 b7       	in	r24, 0x35	; 53
    10a4:	8d 7f       	andi	r24, 0xFD	; 253
    10a6:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	15 c0       	rjmp	.+42     	; 0x10d6 <ex_int_init+0x5c>
		else if(ex_int_mode == any_logical_change)
		{
			Set_Bit(MCUCR,0);
			Clear_Bit(MCUCR,1);
		}
		else if(ex_int_mode == falling_edge)
    10ac:	65 30       	cpi	r22, 0x05	; 5
    10ae:	41 f4       	brne	.+16     	; 0x10c0 <ex_int_init+0x46>
		{
			Clear_Bit(MCUCR,0);
    10b0:	85 b7       	in	r24, 0x35	; 53
    10b2:	8e 7f       	andi	r24, 0xFE	; 254
    10b4:	85 bf       	out	0x35, r24	; 53
			Set_Bit(MCUCR,1);
    10b6:	85 b7       	in	r24, 0x35	; 53
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <ex_int_init+0x5c>
		else if(ex_int_mode == falling_edge)
		{
			Clear_Bit(MCUCR,0);
			Set_Bit(MCUCR,1);
		}
		else if(ex_int_mode == rising_edge)
    10c0:	66 30       	cpi	r22, 0x06	; 6
    10c2:	41 f4       	brne	.+16     	; 0x10d4 <ex_int_init+0x5a>
		{
			Set_Bit(MCUCR,0);
    10c4:	85 b7       	in	r24, 0x35	; 53
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	85 bf       	out	0x35, r24	; 53
			Set_Bit(MCUCR,1);
    10ca:	85 b7       	in	r24, 0x35	; 53
    10cc:	82 60       	ori	r24, 0x02	; 2
    10ce:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <ex_int_init+0x5c>
			Set_Bit(MCUCR,0);
			Set_Bit(MCUCR,1);
		}
		else
		{
			error = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
		}
		Set_Bit(GICR,6);
    10d6:	9b b7       	in	r25, 0x3b	; 59
    10d8:	90 64       	ori	r25, 0x40	; 64
    10da:	9b bf       	out	0x3b, r25	; 59
    10dc:	08 95       	ret
	}
	else if(ex_int_number == Interrupt_1)
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	69 f5       	brne	.+90     	; 0x113c <ex_int_init+0xc2>
	{
		if(ex_int_mode == low_level)
    10e2:	63 30       	cpi	r22, 0x03	; 3
    10e4:	41 f4       	brne	.+16     	; 0x10f6 <ex_int_init+0x7c>
		{
			Clear_Bit(MCUCR,2);
    10e6:	85 b7       	in	r24, 0x35	; 53
    10e8:	8b 7f       	andi	r24, 0xFB	; 251
    10ea:	85 bf       	out	0x35, r24	; 53
			Clear_Bit(MCUCR,3);
    10ec:	85 b7       	in	r24, 0x35	; 53
    10ee:	87 7f       	andi	r24, 0xF7	; 247
    10f0:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	1f c0       	rjmp	.+62     	; 0x1134 <ex_int_init+0xba>
		if(ex_int_mode == low_level)
		{
			Clear_Bit(MCUCR,2);
			Clear_Bit(MCUCR,3);
		}
		else if(ex_int_mode == any_logical_change)
    10f6:	64 30       	cpi	r22, 0x04	; 4
    10f8:	41 f4       	brne	.+16     	; 0x110a <ex_int_init+0x90>
		{
			Set_Bit(MCUCR,2);
    10fa:	85 b7       	in	r24, 0x35	; 53
    10fc:	84 60       	ori	r24, 0x04	; 4
    10fe:	85 bf       	out	0x35, r24	; 53
			Clear_Bit(MCUCR,3);
    1100:	85 b7       	in	r24, 0x35	; 53
    1102:	87 7f       	andi	r24, 0xF7	; 247
    1104:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	15 c0       	rjmp	.+42     	; 0x1134 <ex_int_init+0xba>
		else if(ex_int_mode == any_logical_change)
		{
			Set_Bit(MCUCR,2);
			Clear_Bit(MCUCR,3);
		}
		else if(ex_int_mode == falling_edge)
    110a:	65 30       	cpi	r22, 0x05	; 5
    110c:	41 f4       	brne	.+16     	; 0x111e <ex_int_init+0xa4>
		{
			Clear_Bit(MCUCR,2);
    110e:	85 b7       	in	r24, 0x35	; 53
    1110:	8b 7f       	andi	r24, 0xFB	; 251
    1112:	85 bf       	out	0x35, r24	; 53
			Set_Bit(MCUCR,3);
    1114:	85 b7       	in	r24, 0x35	; 53
    1116:	88 60       	ori	r24, 0x08	; 8
    1118:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0b c0       	rjmp	.+22     	; 0x1134 <ex_int_init+0xba>
		else if(ex_int_mode == falling_edge)
		{
			Clear_Bit(MCUCR,2);
			Set_Bit(MCUCR,3);
		}
		else if(ex_int_mode == rising_edge)
    111e:	66 30       	cpi	r22, 0x06	; 6
    1120:	41 f4       	brne	.+16     	; 0x1132 <ex_int_init+0xb8>
		{
			Set_Bit(MCUCR,2);
    1122:	85 b7       	in	r24, 0x35	; 53
    1124:	84 60       	ori	r24, 0x04	; 4
    1126:	85 bf       	out	0x35, r24	; 53
			Set_Bit(MCUCR,3);
    1128:	85 b7       	in	r24, 0x35	; 53
    112a:	88 60       	ori	r24, 0x08	; 8
    112c:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <ex_int_init+0xba>
			Set_Bit(MCUCR,2);
			Set_Bit(MCUCR,3);
		}
		else
		{
			error = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
		}
		Set_Bit(GICR,7);
    1134:	9b b7       	in	r25, 0x3b	; 59
    1136:	90 68       	ori	r25, 0x80	; 128
    1138:	9b bf       	out	0x3b, r25	; 59
    113a:	08 95       	ret
	}
	else if(ex_int_number == Interrupt_2)
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	99 f4       	brne	.+38     	; 0x1166 <ex_int_init+0xec>
	{
		if(ex_int_mode == falling_edge)
    1140:	65 30       	cpi	r22, 0x05	; 5
    1142:	29 f4       	brne	.+10     	; 0x114e <ex_int_init+0xd4>
		{
			Clear_Bit(MCUCSR,6);
    1144:	84 b7       	in	r24, 0x34	; 52
    1146:	8f 7b       	andi	r24, 0xBF	; 191
    1148:	84 bf       	out	0x34, r24	; 52

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 c0       	rjmp	.+16     	; 0x115e <ex_int_init+0xe4>
	{
		if(ex_int_mode == falling_edge)
		{
			Clear_Bit(MCUCSR,6);
		}
		else if(ex_int_mode == rising_edge)
    114e:	66 30       	cpi	r22, 0x06	; 6
    1150:	29 f4       	brne	.+10     	; 0x115c <ex_int_init+0xe2>
		{
			Set_Bit(MCUCSR,6);
    1152:	84 b7       	in	r24, 0x34	; 52
    1154:	80 64       	ori	r24, 0x40	; 64
    1156:	84 bf       	out	0x34, r24	; 52

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <ex_int_init+0xe4>
		{
			Set_Bit(MCUCSR,6);
		}
		else
		{
			error=1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
		}
		Set_Bit(GICR,5);
    115e:	9b b7       	in	r25, 0x3b	; 59
    1160:	90 62       	ori	r25, 0x20	; 32
    1162:	9b bf       	out	0x3b, r25	; 59
    1164:	08 95       	ret
	}
	else
	{
		error=1;
    1166:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
    1168:	08 95       	ret

0000116a <timer0_init>:
#include "Timer_0.h"

uint8_t timer0_init(uint8_t mode_of_operation, uint8_t timer_starting_value)
{
	uint8_t error=0;
	if(mode_of_operation == Normal)
    116a:	81 11       	cpse	r24, r1
    116c:	08 c0       	rjmp	.+16     	; 0x117e <timer0_init+0x14>
	{
		Clear_Bit(TCCR0,6);
    116e:	83 b7       	in	r24, 0x33	; 51
    1170:	8f 7b       	andi	r24, 0xBF	; 191
    1172:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,3);
    1174:	83 b7       	in	r24, 0x33	; 51
    1176:	87 7f       	andi	r24, 0xF7	; 247
    1178:	83 bf       	out	0x33, r24	; 51

#include "Timer_0.h"

uint8_t timer0_init(uint8_t mode_of_operation, uint8_t timer_starting_value)
{
	uint8_t error=0;
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <timer0_init+0x52>
	if(mode_of_operation == Normal)
	{
		Clear_Bit(TCCR0,6);
		Clear_Bit(TCCR0,3);
	}
	else if(mode_of_operation == PWM)
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	41 f4       	brne	.+16     	; 0x1192 <timer0_init+0x28>
	{
		Set_Bit(TCCR0,6);
    1182:	83 b7       	in	r24, 0x33	; 51
    1184:	80 64       	ori	r24, 0x40	; 64
    1186:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,3);
    1188:	83 b7       	in	r24, 0x33	; 51
    118a:	87 7f       	andi	r24, 0xF7	; 247
    118c:	83 bf       	out	0x33, r24	; 51

#include "Timer_0.h"

uint8_t timer0_init(uint8_t mode_of_operation, uint8_t timer_starting_value)
{
	uint8_t error=0;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <timer0_init+0x52>
	else if(mode_of_operation == PWM)
	{
		Set_Bit(TCCR0,6);
		Clear_Bit(TCCR0,3);
	}
	else if(mode_of_operation == CTC)
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	41 f4       	brne	.+16     	; 0x11a6 <timer0_init+0x3c>
	{
		Clear_Bit(TCCR0,6);
    1196:	83 b7       	in	r24, 0x33	; 51
    1198:	8f 7b       	andi	r24, 0xBF	; 191
    119a:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0,3);
    119c:	83 b7       	in	r24, 0x33	; 51
    119e:	88 60       	ori	r24, 0x08	; 8
    11a0:	83 bf       	out	0x33, r24	; 51

#include "Timer_0.h"

uint8_t timer0_init(uint8_t mode_of_operation, uint8_t timer_starting_value)
{
	uint8_t error=0;
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0b c0       	rjmp	.+22     	; 0x11bc <timer0_init+0x52>
	else if(mode_of_operation == CTC)
	{
		Clear_Bit(TCCR0,6);
		Set_Bit(TCCR0,3);
	}
	else if(mode_of_operation == Fast_PWM)
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	41 f4       	brne	.+16     	; 0x11ba <timer0_init+0x50>
	{
		Set_Bit(TCCR0,6);
    11aa:	83 b7       	in	r24, 0x33	; 51
    11ac:	80 64       	ori	r24, 0x40	; 64
    11ae:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0,3);
    11b0:	83 b7       	in	r24, 0x33	; 51
    11b2:	88 60       	ori	r24, 0x08	; 8
    11b4:	83 bf       	out	0x33, r24	; 51

#include "Timer_0.h"

uint8_t timer0_init(uint8_t mode_of_operation, uint8_t timer_starting_value)
{
	uint8_t error=0;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <timer0_init+0x52>
		Set_Bit(TCCR0,6);
		Set_Bit(TCCR0,3);
	}
	else
	{
		error = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	TCNT0 = timer_starting_value;
    11bc:	62 bf       	out	0x32, r22	; 50
	Set_Bit(SREG,7);
    11be:	9f b7       	in	r25, 0x3f	; 63
    11c0:	90 68       	ori	r25, 0x80	; 128
    11c2:	9f bf       	out	0x3f, r25	; 63
	Set_Bit(TIMSK,0);
    11c4:	99 b7       	in	r25, 0x39	; 57
    11c6:	91 60       	ori	r25, 0x01	; 1
    11c8:	99 bf       	out	0x39, r25	; 57
	return error;
}
    11ca:	08 95       	ret

000011cc <start_timer0>:

uint8_t start_timer0(unsigned int prescaler)
{
	uint8_t error=0;
	if(prescaler == 0)
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	59 f4       	brne	.+22     	; 0x11e6 <start_timer0+0x1a>
	{
		Clear_Bit(TCCR0,0);
    11d0:	83 b7       	in	r24, 0x33	; 51
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,1);
    11d6:	83 b7       	in	r24, 0x33	; 51
    11d8:	8d 7f       	andi	r24, 0xFD	; 253
    11da:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,2);
    11dc:	83 b7       	in	r24, 0x33	; 51
    11de:	8b 7f       	andi	r24, 0xFB	; 251
    11e0:	83 bf       	out	0x33, r24	; 51
	return error;
}

uint8_t start_timer0(unsigned int prescaler)
{
	uint8_t error=0;
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	08 95       	ret
	{
		Clear_Bit(TCCR0,0);
		Clear_Bit(TCCR0,1);
		Clear_Bit(TCCR0,2);
	}
	else if(prescaler == 1)
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	91 05       	cpc	r25, r1
    11ea:	59 f4       	brne	.+22     	; 0x1202 <start_timer0+0x36>
	{
		Set_Bit(TCCR0,0);
    11ec:	83 b7       	in	r24, 0x33	; 51
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,1);
    11f2:	83 b7       	in	r24, 0x33	; 51
    11f4:	8d 7f       	andi	r24, 0xFD	; 253
    11f6:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,2);
    11f8:	83 b7       	in	r24, 0x33	; 51
    11fa:	8b 7f       	andi	r24, 0xFB	; 251
    11fc:	83 bf       	out	0x33, r24	; 51
	return error;
}

uint8_t start_timer0(unsigned int prescaler)
{
	uint8_t error=0;
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
	{
		Set_Bit(TCCR0,0);
		Clear_Bit(TCCR0,1);
		Clear_Bit(TCCR0,2);
	}
	else if(prescaler == 8)
    1202:	88 30       	cpi	r24, 0x08	; 8
    1204:	91 05       	cpc	r25, r1
    1206:	59 f4       	brne	.+22     	; 0x121e <start_timer0+0x52>
	{
		Clear_Bit(TCCR0,0);
    1208:	83 b7       	in	r24, 0x33	; 51
    120a:	8e 7f       	andi	r24, 0xFE	; 254
    120c:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0,1);
    120e:	83 b7       	in	r24, 0x33	; 51
    1210:	82 60       	ori	r24, 0x02	; 2
    1212:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,2);
    1214:	83 b7       	in	r24, 0x33	; 51
    1216:	8b 7f       	andi	r24, 0xFB	; 251
    1218:	83 bf       	out	0x33, r24	; 51
	return error;
}

uint8_t start_timer0(unsigned int prescaler)
{
	uint8_t error=0;
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret
	{
		Clear_Bit(TCCR0,0);
		Set_Bit(TCCR0,1);
		Clear_Bit(TCCR0,2);
	}
	else if(prescaler == 64)
    121e:	80 34       	cpi	r24, 0x40	; 64
    1220:	91 05       	cpc	r25, r1
    1222:	59 f4       	brne	.+22     	; 0x123a <start_timer0+0x6e>
	{
		Set_Bit(TCCR0,0);
    1224:	83 b7       	in	r24, 0x33	; 51
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0,1);
    122a:	83 b7       	in	r24, 0x33	; 51
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,2);
    1230:	83 b7       	in	r24, 0x33	; 51
    1232:	8b 7f       	andi	r24, 0xFB	; 251
    1234:	83 bf       	out	0x33, r24	; 51
	return error;
}

uint8_t start_timer0(unsigned int prescaler)
{
	uint8_t error=0;
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret
	{
		Set_Bit(TCCR0,0);
		Set_Bit(TCCR0,1);
		Clear_Bit(TCCR0,2);
	}
	else if(prescaler == 256)
    123a:	81 15       	cp	r24, r1
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	92 07       	cpc	r25, r18
    1240:	59 f4       	brne	.+22     	; 0x1258 <start_timer0+0x8c>
	{
		Clear_Bit(TCCR0,0);
    1242:	83 b7       	in	r24, 0x33	; 51
    1244:	8e 7f       	andi	r24, 0xFE	; 254
    1246:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,1);
    1248:	83 b7       	in	r24, 0x33	; 51
    124a:	8d 7f       	andi	r24, 0xFD	; 253
    124c:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0,2);
    124e:	83 b7       	in	r24, 0x33	; 51
    1250:	84 60       	ori	r24, 0x04	; 4
    1252:	83 bf       	out	0x33, r24	; 51
	return error;
}

uint8_t start_timer0(unsigned int prescaler)
{
	uint8_t error=0;
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	08 95       	ret
	{
		Clear_Bit(TCCR0,0);
		Clear_Bit(TCCR0,1);
		Set_Bit(TCCR0,2);
	}
	else if(prescaler == 1024)
    1258:	81 15       	cp	r24, r1
    125a:	94 40       	sbci	r25, 0x04	; 4
    125c:	59 f4       	brne	.+22     	; 0x1274 <start_timer0+0xa8>
	{
		Set_Bit(TCCR0,0);
    125e:	83 b7       	in	r24, 0x33	; 51
    1260:	81 60       	ori	r24, 0x01	; 1
    1262:	83 bf       	out	0x33, r24	; 51
		Clear_Bit(TCCR0,1);
    1264:	83 b7       	in	r24, 0x33	; 51
    1266:	8d 7f       	andi	r24, 0xFD	; 253
    1268:	83 bf       	out	0x33, r24	; 51
		Set_Bit(TCCR0,2);
    126a:	83 b7       	in	r24, 0x33	; 51
    126c:	84 60       	ori	r24, 0x04	; 4
    126e:	83 bf       	out	0x33, r24	; 51
	return error;
}

uint8_t start_timer0(unsigned int prescaler)
{
	uint8_t error=0;
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	08 95       	ret
		Clear_Bit(TCCR0,1);
		Set_Bit(TCCR0,2);
	}
	else
	{
		error=1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
    1276:	08 95       	ret

00001278 <_exit>:
    1278:	f8 94       	cli

0000127a <__stop_program>:
    127a:	ff cf       	rjmp	.-2      	; 0x127a <__stop_program>
